#Importations
from copy import deepcopy
import json
import random
import sys
import typing
from discord.ext import commands
import discord
import checks
import os
from guildWriter import dataGuild, modele
import emoji
import config


#Groupe g√©n√©ral
@commands.group(name = "administrateur", aliases = ["admin", "ad", "a"])
@commands.check_any(
    commands.check(lambda ctx: ctx.author.guild_permissions.administrator),
    commands.check(lambda ctx: checks.hasRolePerm(ctx, ctx.guild.id, ctx.author.id, "Admin"))
)
async def administrateurGroup(ctx: commands.Context):
    """Commandes r√©serv√©es aux administrateurs"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(administrateurGroup)



#Modification des r√¥les
@commands.group(name = "r√¥les", aliases = ["r"])
async def r√¥lesGroupAdministrateur(ctx: commands.Context):
    """Commandes des r√¥les de permission du serveur"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(r√¥lesGroupAdministrateur)

#R√¥le √† modifier
@commands.group(name = "membre", aliases = ["m"])
async def membreGroupRole(ctx: commands.Context):
    """R√¥le de membre"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(membreGroupRole)

@commands.group(name = "mod√©ration", aliases = ["modo", "staff", "s"])
async def mod√©rationGroupR√¥le(ctx: commands.Context):
    """R√¥le de mod√©ration"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(mod√©rationGroupR√¥le)

@commands.group(name = "admininistrateur", aliases = ["admin", "ad", "a"])
async def administrateurGroupR√¥le(ctx: commands.Context):
    """R√¥le d'administrateur"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(administrateurGroupR√¥le)

@commands.group(name = "muet", aliases = ["mu"])
async def muetGroupR√¥le(ctx: commands.Context):
    """R√¥le de personne muette"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(muetGroupR√¥le)

@commands.group(name = "valorant", aliases = ["calo"])
async def valorantGroupR√¥le(ctx: commands.Context):
    """R√¥le des joueurs de Valorant"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(valorantGroupR√¥le)

@commands.group(name = "entra√Æneurs", aliases = ["e"])
async def entra√ÆneursGroupRole(ctx: commands.Context):
    """R√¥le des entra√Æneurs valo"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(entra√ÆneursGroupRole)


#Type de modification
@commands.command(name = "ajouter", aliases = ["a", "+"])
async def addCmdRoles(ctx: commands.Context, *r√¥les: discord.Role):
    """Ajoute le r√¥le indiqu√© dans la liste des r√¥les correspondant au parent dans le fichier de donn√©es des serveurs"""
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        data = json.load(file)
        if not str(ctx.guild.id) in data:
            dataGuild(ctx.guild.id, ctx)
        for r√¥le in r√¥les:
            if r√¥le.id in data[str(ctx.guild.id)]["roles"][ctx.invoked_parents[2]]:
                return await ctx.reply("Le r√¥le <" + r√¥le.name + "> est d√©j√† assign√© au grade [" + ctx.invoked_parents[2] + "].")
            data[str(ctx.guild.id)]["r√¥les"][ctx.invoked_parents[2]].append(r√¥le.id)
            await ctx.reply("Le r√¥le <" + r√¥le.name + "> est maintenant ajout√© en tant que r√¥le pour [" + ctx.invoked_parents[2] + "].")
            with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json", "w") as fileWritable:
                fileWritable.write(json.dumps(data, indent=4))


@commands.command(name = "enlever", aliases = ["e", "-"])
async def enleverCmdR√¥les(ctx: commands.Context, *r√¥les: discord.Role):
    """Supprime le r√¥le indiqu√© dans la liste des r√¥les correspondant au parent dans le fichier de donn√©es des serveurs"""
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        data = json.load(file)
        if not str(ctx.guild.id) in data:
            return dataGuild(ctx.guild.id, ctx)
        for role in r√¥les:
            if not role.id in data[str(ctx.guild.id)]["roles"][ctx.invoked_parents[2]]:
                return await ctx.reply("Le r√¥le <" + role.name + "> n'est d√©j√† pas assign√© au grade [" + ctx.invoked_parents[2] + "].")
            data[str(ctx.guild.id)]["roles"][ctx.invoked_parents[2]].pop(data[str(ctx.guild.id)]["roles"][ctx.invoked_parents[2]].index(role.id))
            await ctx.reply("Le r√¥le <" + role.name + "> est maintenant retir√© de la liste de r√¥les pour le grade [" + ctx.invoked_parents[2] + "].")
            with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json", "w") as fileWritable:
                fileWritable.write(json.dumps(data, indent=4))


@commands.command(name = "liste", aliases = ["l"])
async def listeCmdRoleORRoles(ctx: commands.Context):
    """Envoie la liste des r√¥les assign√©s aux permissions du serveur (une seule si le r√¥le de permission en question est pr√©cis√©e avant le liste)"""
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        data = json.load(file)
        if ctx.invoked_parents[-1] == "role":
            embed = discord.Embed(title = "Liste des r√¥les assign√©s")
            for roleName in data[str(ctx.guild.id)]["roles"]:
                rolesID = data[str(ctx.guild.id)]["roles"][roleName]
                message = []
                for roleID in rolesID:
                    message.append("<@&" + str(roleID) + ">")
                message = ", ".join(message)
                if len(message) == 0:
                    message = "Aucun r√¥le assign√©"
                embed.add_field(name = roleName, value = message, inline = False)
            await ctx.reply(embed = embed)
        #Ne renvoie que celle du r√¥le demand√© si la commande est apr√®s un r√¥le
        else:
            embed = discord.Embed(title = "Liste des r√¥les assign√©s")
            rolesID = data[str(ctx.guild.id)]["roles"][ctx.invoked_parents[-1]]
            message = []
            for roleID in rolesID:
                message.append("<@&" + str(roleID) + ">")
            message = ", ".join(message)
            if len(message) == 0:
                message = "Aucun r√¥le assign√©"
            embed.add_field(name = ctx.invoked_parents[-1], value = message, inline = False)
            await ctx.reply(embed = embed)



#Giveaway
@commands.group(name = "concours", aliases = ["co", "giveaway", "g"])
async def tombolaGroupAdmin(ctx: commands.Context):
    """Commandes des tombola niveau administrateur"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(tombolaGroupAdmin)

@commands.command(name = "cr√©er", aliases = ["c", "+"])
async def cr√©erCmdTombola(ctx: commands.Context, nom: str, description: str, salon: discord.TextChannel = "Salon du message", emote: typing.Union[discord.Emoji, str] = "üéâ"):
    """Cr√©e une tombola"""
    if not isinstance(emote, discord.Emoji) and len(emoji.emoji_list(str(emote))) == 0:
        return await ctx.send("√âmoji invalide")
    if salon == "Salon du message":
        salon = ctx.channel
    embed = discord.Embed(title = nom, description = description)
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        data = json.load(file)
        giveawayName = [g for g in data[str(ctx.guild.id)]["giveaway"] if g["nom"] == nom]
        if len(giveawayName) != 0:
            return await ctx.reply("Un giveaway avec ce nom existe d√©j√†.")
        message = await salon.send(embed = embed)
        await message.add_reaction(emote)
        giveaway = deepcopy(modele["giveaway"][0])
        giveaway["nom"] = nom
        giveaway["description"] = description
        giveaway["participants"] = []
        if isinstance(emote, discord.Emoji):
            giveaway["reaction"].append(emote.name)
        else:
            giveaway["reaction"].append(emote)
        giveaway["messageID"] = message.id
        giveaway["gagnants"] = []
        data[str(ctx.guild.id)]["giveaway"].append(giveaway)
        await ctx.message.delete()
        with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json", "w") as fileWritable:
            fileWritable.write(json.dumps(data, indent = 4))


@commands.command(name = "terminer", aliases = ["ter", "-"])
async def terminerCmdTombola(ctx: commands.Context, nom: str):
    """Supprime une tombola par son nom"""
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        await ctx.message.delete()
        data = json.load(file)
        giveawayName = [g for g in data[str(ctx.guild.id)]["giveaway"] if g["nom"] == nom]
        if len(giveawayName) == 0:
            return await ctx.reply("Aucun giveaway n'a ce nom.")
        if len(giveawayName[0]["gagnants"]) == 0:
            embed = discord.Embed(title = giveawayName[0]["nom"], description = giveawayName[0]["description"])
            embed.add_field(name = "Erreur ‚ùå", value = "Giveaway annul√©")
            msg = await ctx.channel.fetch_message(giveawayName[0]["messageID"])
            await msg.edit(embed = embed)
        await msg.clear_reactions()
        data[str(ctx.guild.id)]["giveaway"].pop(data[str(ctx.guild.id)]["giveaway"].index(giveawayName[0]))
        for id in giveawayName[0]["gagnants"]:
            user = await ctx.bot.fetch_user(id)
            channel = await user.create_dm()
            channel.send("F√©licitations, vous avez gagn√© le giveaway \"" + giveawayName[0]["nom"] + "\".")
        with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json", "w") as fileWritable:
            fileWritable.write(json.dumps(data, indent = 4))


@commands.command(name = "tirer", aliases = ["t"])
async def tirerCmdTombola(ctx: commands.Context, nom: str, nombreGagnants: int = 1):
    """Choisit au hasard un gagnant parmi les participants d'une tombola"""
    with open(os.path.abspath(os.path.dirname(__file__)) + "/../guilds.json") as file:
        data = json.load(file)
        giveawayName = [g for g in data[str(ctx.guild.id)]["giveaway"] if g["nom"] == nom]
        if len(giveawayName) == 0:
            return await ctx.reply("Aucun giveaway n'a ce nom.")
        if len(giveawayName[0]["participants"]) == 0:
            return await ctx.reply("Il faut au moins un participant pour tirer un membre au hasard")
        if nombreGagnants > len(giveawayName[0]["participants"]):
            return await ctx.reply("Pas assez de participants au concours pour ce nombre de gagnants")
        ids = random.sample(giveawayName[0]["participants"], k=nombreGagnants)
        giveawayName[0]["gagnants"] = [ctx.bot.get_user(i).mention for i in ids if ctx.bot.get_user(i).bot == False]
        embed = discord.Embed(title = giveawayName[0]["nom"], description = giveawayName[0]["description"]).add_field(name = "Gagnant(s) ‚úÖ", value = ", ".join(giveawayName[0]["gagnants"]))
        msg = await ctx.channel.fetch_message(giveawayName[0]["messageID"])
        await msg.edit(embed = embed)
        await msg.clear_reactions()
        await ctx.message.delete()



@commands.group(name = "contr√¥le", aliases = ["c"])
async def contr√¥leGroupAdmin(ctx: commands.Context):
    """R√¥le des joueurs Valo"""
    if not ctx.invoked_subcommand:
        await ctx.reply("Cette commande n√©cessite d'√™tre appel√©e avec une sous-commande")
        await ctx.send_help(valorantGroupR√¥le)


@commands.command(name = "arr√™ter", aliases = ["stop"])
async def arr√™terCmdContr√¥le(ctx: commands.Context):
    """Stop le bot"""
    msg = await ctx.reply("Voulez-vous vraiment arr√™ter le bot ?")
    await msg.add_reaction("‚úÖ")
    await msg.add_reaction("‚ùå")
    try:
        #Attend la reaction de l'utilisateur
        reaction, user = await ctx.bot.wait_for(event = "reaction_add", timeout = 30.0, check = lambda reaction, user: user.id == ctx.author.id and reaction.message.id == msg.id)
        if reaction.emoji == "‚ùå":
            await msg.clear_reactions()
            await ctx.reply("Annulation de l'arr√™t")
            raise Exception("Annulation de l'arr√™t")
        elif reaction.emoji == "‚úÖ":
            await msg.clear_reactions()
            await ctx.reply("Arr√™t du bot")
            await ctx.bot.close()
    #Si le timeout est d√©pass√© ou qu'il y a une erreur
    except Exception as err:
        print(err)


@commands.command(name = "relancer", aliases = ["reboot"])
async def relancerCmdContr√¥le(ctx: commands.Context):
    msg = await ctx.reply("Voulez-vous vraiment relancer le bot ?")
    await msg.add_reaction("‚úÖ")
    await msg.add_reaction("‚ùå")
    try:
        #Attend la reaction de l'utilisateur
        reaction, user = await ctx.bot.wait_for(event = "reaction_add", timeout = 30.0, check = lambda reaction, user: user.id == ctx.author.id and reaction.message.id == msg.id)
        if reaction.emoji == "‚ùå":
            await msg.clear_reactions()
            await ctx.reply("Annulation du relancement")
            raise Exception("Annulation du relancement")
        elif reaction.emoji == "‚úÖ":
            await msg.clear_reactions()
            await ctx.reply("Relancement du bot")
            await ctx.bot.close()
            os.system("python " + os.path.abspath(os.path.dirname(__file__)) + "/../index.py")
    #Si le timeout est d√©pass√© ou qu'il y a une erreur
    except Exception as err:
        print(err)


#Ajout des groupes aux cat√©gories
administrateurGroup.add_command(r√¥lesGroupAdministrateur)
r√¥lesGroupAdministrateur.add_command(membreGroupRole)
r√¥lesGroupAdministrateur.add_command(mod√©rationGroupR√¥le)
r√¥lesGroupAdministrateur.add_command(administrateurGroupR√¥le)
r√¥lesGroupAdministrateur.add_command(muetGroupR√¥le)
r√¥lesGroupAdministrateur.add_command(valorantGroupR√¥le)
r√¥lesGroupAdministrateur.add_command(entra√ÆneursGroupRole)

administrateurGroup.add_command(tombolaGroupAdmin)

administrateurGroup.add_command(contr√¥leGroupAdmin)


#Ajout des commandes aux cat√©gories
membreGroupRole.add_command(addCmdRoles)
mod√©rationGroupR√¥le.add_command(addCmdRoles)
administrateurGroupR√¥le.add_command(addCmdRoles)
muetGroupR√¥le.add_command(addCmdRoles)
valorantGroupR√¥le.add_command(addCmdRoles)
entra√ÆneursGroupRole.add_command(addCmdRoles)

membreGroupRole.add_command(enleverCmdR√¥les)
mod√©rationGroupR√¥le.add_command(enleverCmdR√¥les)
administrateurGroupR√¥le.add_command(enleverCmdR√¥les)
muetGroupR√¥le.add_command(enleverCmdR√¥les)
valorantGroupR√¥le.add_command(enleverCmdR√¥les)
entra√ÆneursGroupRole.add_command(enleverCmdR√¥les)

r√¥lesGroupAdministrateur.add_command(listeCmdRoleORRoles)
membreGroupRole.add_command(listeCmdRoleORRoles)
mod√©rationGroupR√¥le.add_command(listeCmdRoleORRoles)
administrateurGroupR√¥le.add_command(listeCmdRoleORRoles)
muetGroupR√¥le.add_command(listeCmdRoleORRoles)
valorantGroupR√¥le.add_command(listeCmdRoleORRoles)
entra√ÆneursGroupRole.add_command(listeCmdRoleORRoles)


tombolaGroupAdmin.add_command(cr√©erCmdTombola)
tombolaGroupAdmin.add_command(terminerCmdTombola)
tombolaGroupAdmin.add_command(tirerCmdTombola)

contr√¥leGroupAdmin.add_command(arr√™terCmdContr√¥le)
contr√¥leGroupAdmin.add_command(relancerCmdContr√¥le)



#Commande setup pour l'importation du module
def setup(bot: commands.Bot):
    """Rajoute la cat√©gorie admin au bot"""
    bot.add_command(administrateurGroup)